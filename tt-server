#!/bin/sh
#-*- scheme -*-
#
#    Copyright (C) 2012 Greg Benison
#   
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#   
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#   
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#  

export GUILE_LOAD_PATH=$GUILE_LOAD_PATH:`pwd`;
export LTDL_LIBRARY_PATH=$LTDL_LIBRARY_PATH:`pwd`;
export GUILE_WARN_DEPRECATED=no;
# exec guile -s $0 2>/dev/null
exec guile -s $0 $@ 2>>guile-error.log

!#

(use-modules (taubatron)
	     (sxml simple)
	     (rnrs bytevectors)
	     (web request)
	     (web server))

(define socket-file-name
  (or (false-if-exception (cadr (command-line)))
      "/tmp/test.sock"))

(define (sxml->text sxml)
  (with-output-to-string
    (lambda () (sxml->xml sxml))))

(define (as-li x)`(li ,x))

(define (make-taubatron-reply start end)
  `(html
    (head
     (title "t**tron")
     (body ,(catch 'taubatron-error
	      (lambda ()
		(if (and (string? start) (string? end))
		    `(ul ,(map as-li (find-path start end)))
		    "Enter starting and ending words:"))
	      (lambda (key proc msg . args)
		`(div (@ (class "error"))
		      "Error:"
		      (p ,msg))))
	   (form (@ (method "post")
		    (action "taubatron"))
		 (input (@ (type "text")
			   (name "start")))
		 (input (@ (type "text")
			   (name "end")))
		 (input (@ (type "submit")
			   (value "Go"))))))))

(define (list->assoc-pair lst)
  (if (null? (cdr lst))
      (cons (car lst) #f)
      (cons (car lst)
	    (cadr lst))))

(define (parse-post-data data)
  (map list->assoc-pair
       (map
	(lambda (str)
	  (string-split str #\=))
	(string-split (utf8->string data) #\&))))

(define (tt-handler request request-body)
  (cond ((eq? (request-method request) 'GET)
	 (values '((content-type . (text/html)))
		 (sxml->text (make-taubatron-reply #f #f))))
	((eq? (request-method request) 'POST)
	 (values '((content-type . (text/html)))
		 (let ((post-data (parse-post-data request-body)))
		   (sxml->text (make-taubatron-reply
				(assoc-ref post-data "start")
				(assoc-ref post-data "end"))))))))

(define (make-unix-socket fname)
  (let ((server-socket (socket PF_UNIX SOCK_STREAM 0)))
    (bind server-socket AF_UNIX fname)
    server-socket))

;; (run-server tt-handler)
(run-server tt-handler 'http `(#:socket ,(make-unix-socket socket-file-name)))